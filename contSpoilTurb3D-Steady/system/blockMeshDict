/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;  // Conversion factor, adjust if needed

// Domain and Building Dimensions
l_b         2.4384; // Container chord
w_b         6.0960; // Container width, ignored in 2D
h_b         7.7724; // Container height
// 5H recommended by Franke et al, 3H recommended by Abu-zidan et al
l_u         5.; // Multiplier for domain upstream distance
// l_u         1.;
// 15H recommended by Franke et al, 3H recommended by Abu-zidan et al
l_d         15.; // Multiplier for domain downstream distance
// l_d         1.;
// 5H recommended by Franke et al, 3H recommended by Abu-zidan et al
l_w         5.; // Multiplier for domain width distance, ignored in 2D (5 recommended by Franke et al)
// l_w         1.;
// 6H recommended by Franke et al
l_h         6.; // Multiplier for domain height distance, 33X is for blockage ratio of 3% in 2D
// l_h         1.;
// 0.3% recommended by Franke et al, 0.81% recommended by Abu-zidan et al

// Evaluation of Domain Dimensions
x_up        #calc "$h_b * $l_u";
x_down      #calc "$h_b * $l_d";
y_pad       #calc "$w_b * $l_w";
z_pad       #calc "$h_b * $l_h"; // Ignored in 2D

// Evaluation of Vertex Positions
x0          #calc "-$x_up";
x1          0;
x2          #calc "$l_b";
x3          #calc "$x2 + $x_down";

y0          #calc "- $w_b / 2 - $y_pad";
y1          #calc "- $w_b / 2";
y2			#calc "$y1 + $w_b";
y3			#calc "$y2 + $y_pad";

z0          #calc "-$h_b";
z1          0;
z2          #calc "$z1 + $z_pad";
//Check most of these
nx1         50;   // Number of elements in the upstream direction. Unsure here on how many. At least 50
nx2         100;   // Number of elements from front of container to back of container. Bit overkill, only need 50 if want to keep cells to .05m
nx3         100;  // Number of elements in the downstream direction. Also unsure
ny1         25;   // Number of elements from container side to domain side. 
ny2         150;   // Number of elements along front edge of container. 120 to keep .05m cell size
ny3         25;	  // Number of elements from container side to domain side
nz1         30;   // Number of elements from ground to container top
nz2         75;  // Number of elements from container top to domain top. This might need to be higher too

vertices
(
    ($x0 $y0 $z0)  //  0
    ($x1 $y0 $z0)  //  1
    ($x2 $y0 $z0)  //  2
    ($x3 $y0 $z0)  //  3
    ($x0 $y0 $z1)  //  4
    ($x1 $y0 $z1)  //  5
    ($x2 $y0 $z1)  //  6
    ($x3 $y0 $z1)  //  7
    ($x0 $y0 $z2)  //  8
    ($x1 $y0 $z2)  //  9
    ($x2 $y0 $z2)  // 10
    ($x3 $y0 $z2)  // 11

    ($x0 $y1 $z0)  // 12
    ($x1 $y1 $z0)  // 13
    ($x2 $y1 $z0)  // 14
    ($x3 $y1 $z0)  // 15
    ($x0 $y1 $z1)  // 16
    ($x1 $y1 $z1)  // 17
    ($x2 $y1 $z1)  // 18
    ($x3 $y1 $z1)  // 19
    ($x0 $y1 $z2)  // 20
    ($x1 $y1 $z2)  // 21
    ($x2 $y1 $z2)  // 22
    ($x3 $y1 $z2)  // 23

    ($x0 $y2 $z0)  // 24
    ($x1 $y2 $z0)  // 25
    ($x2 $y2 $z0)  // 26
    ($x3 $y2 $z0)  // 27
    ($x0 $y2 $z1)  // 28
    ($x1 $y2 $z1)  // 29
    ($x2 $y2 $z1)  // 30
    ($x3 $y2 $z1)  // 31
    ($x0 $y2 $z2)  // 32
    ($x1 $y2 $z2)  // 33
    ($x2 $y2 $z2)  // 34
    ($x3 $y2 $z2)  // 35

    ($x0 $y3 $z0)  // 36
    ($x1 $y3 $z0)  // 37
    ($x2 $y3 $z0)  // 38
    ($x3 $y3 $z0)  // 39
    ($x0 $y3 $z1)  // 40
    ($x1 $y3 $z1)  // 41
    ($x2 $y3 $z1)  // 42
    ($x3 $y3 $z1)  // 43
    ($x0 $y3 $z2)  // 44
    ($x1 $y3 $z2)  // 45
    ($x2 $y3 $z2)  // 46
    ($x3 $y3 $z2)  // 47
);

edges
(
);

// Currently using simplified scaling, where there is only a single bias in each hex
x_up        	0.25;
x_down        	4;
z_top        	8;
z_bottom      	1;
y_side1			0.2;
y_side2			5;

blocks
(
	hex ( 0  1 13 12  4  5 17 16) ($nx1 $ny1 $nz1) simpleGrading ( $x_up $y_side1  $z_bottom)
    hex ( 1  2 14 13  5  6 18 17) ($nx2 $ny1 $nz1) simpleGrading ( 1   $y_side1  $z_bottom)
    hex ( 2  3 15 14  6  7 19 18) ($nx3 $ny1 $nz1) simpleGrading ($x_down   $y_side1  $z_bottom)
    hex ( 4  5 17 16  8  9 21 20) ($nx1 $ny1 $nz2) simpleGrading ( $x_up $y_side1 $z_top)
    hex ( 5  6 18 17  9 10 22 21) ($nx2 $ny1 $nz2) simpleGrading ( 1   $y_side1 $z_top)
    hex ( 6  7 19 18 10 11 23 22) ($nx3 $ny1 $nz2) simpleGrading ($x_down   $y_side1 $z_top)

    hex (12 13 25 24 16 17 29 28) ($nx1 $ny2 $nz1) simpleGrading ($x_up 1 $z_bottom)
    // hex (13 14 26 25 17 18 30 29) ($nx2 $ny2 $nz1) simpleGrading (1 1 $z_bottom)
    hex (14 15 27 26 18 19 31 30) ($nx3 $ny2 $nz1) simpleGrading ($x_down 1 $z_bottom)
    hex (16 17 29 28 20 21 33 32) ($nx1 $ny2 $nz2) simpleGrading ($x_up 1 $z_top)
    hex (17 18 30 29 21 22 34 33) ($nx2 $ny2 $nz2) simpleGrading (1 1 $z_top)
    hex (18 19 31 30 22 23 35 34) ($nx3 $ny2 $nz2) simpleGrading ($x_down 1 $z_top)

    hex (24 25 37 36 28 29 41 40) ($nx1 $ny3 $nz1) simpleGrading ($x_up $y_side2 $z_bottom)
    hex (25 26 38 37 29 30 42 41) ($nx2 $ny3 $nz1) simpleGrading (1 $y_side2 $z_bottom)
    hex (26 27 39 38 30 31 43 42) ($nx3 $ny3 $nz1) simpleGrading ($x_down $y_side2 $z_bottom)
    hex (28 29 41 40 32 33 45 44) ($nx1 $ny3 $nz2) simpleGrading ($x_up $y_side2 $z_top)
    hex (29 30 42 41 33 34 46 45) ($nx2 $ny3 $nz2) simpleGrading (1 $y_side2 $z_top)
    hex (30 31 43 42 34 35 47 46) ($nx3 $ny3 $nz2) simpleGrading ($x_down $y_side2 $z_top)

);

boundary
(
    inlet
    {
        type patch; 
        faces
        (
			( 0  4 16 12)
            (12 16 28 24)
            (24 28 40 36)
            ( 4  8 20 16)
            (16 20 32 28)
            (28 32 44 40)
        );
    }
 
    outlet
    {
        type patch;  
        faces
        (
            ( 3 15 19  7)
            (15 27 31 19)
            (27 39 43 31)
            ( 7 19 23 11)
            (19 31 35 23)
            (31 43 47 35)
        );
    }

    container
    {
        type wall; 
        faces
        (
			(13 17 18 14)
            (14 18 30 26)
            (25 29 30 26)
            (13 25 29 17)
            (17 29 30 18)
        );
    }
 
	ground
	{
		type wall;
		faces
		(
			( 0 12 13  1)
            ( 1 13 14  2)
            ( 2 14 15  3)
            (12 24 25 13)
            (14 26 27 15)
            (24 36 37 25)
            (25 37 38 26)
            (26 38 39 27)
		);
	}
 
	top
    {
        type patch;  
        faces
        (
			( 8  9 21 20)
            ( 9 10 22 21)
            (10 11 23 22)
            (20 21 33 32)
            (21 22 34 33)
            (22 23 35 34)
            (32 33 45 44)
            (33 34 46 45)
            (34 35 47 46)
        );
    }
 
	leftSide
    {
        type patch;  
        faces
        (
			( 0  1  5  4)
            ( 1  2  6  5)
            ( 2  3  7  6)
            ( 4  5  9  8)
            ( 5  6 10  9)
            ( 6  7 11 10)
        );
    }
 
	rightSide
    {
        type patch;  
        faces
        (
            (36 40 41 37)
            (37 41 42 38)
            (38 42 43 39)
            (40 44 45 41)
            (41 45 46 42)
            (42 46 47 43)
        );
    }
);

mergePatchPairs
(
);