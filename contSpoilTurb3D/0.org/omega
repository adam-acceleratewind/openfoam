/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      omega;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "include/initialConditions"

dimensions      [0 0 -1 0 0 0 0];

internalField   uniform $turbulentOmega;

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"
	
	inlet
	{		
		type  codedFixedValue;
		value $internalField;
		name ablProfile_omega;
		
		code
		#{
		const fvPatch& boundaryPatch = patch();
		const vectorField& Cf = boundaryPatch.Cf();
		scalarField& field = *this;   
		
		scalar Ut = 6.37, hb = 7.77239990234375, z0 = 0.017, ht = 8.91389990234375; //input values
		scalar kappa = 0.41;
		
		forAll(field, faceI)
		{
			const scalar y = Cf[faceI].y();
			const scalar u_star = (kappa * Ut) / log((ht + z0) / z0);
			const scalar omega_inlet = u_star / (kappa * (y + hb + z0));
			field[faceI] = omega_inlet;
		}
		#};
			 
		codeOptions
		#{
		-I$(FOAM_SRC)/finiteVolume/lnInclude \
		-I$(FOAM_SRC)/meshTools/lnInclude
		#};
		
	}

    outlet
    {
        type            inletOutlet;
        inletValue      $internalField;
        value           $internalField;
    }

	container
    {
        type            omegaWallFunction;
        value           $internalField;
    }
	
	spoiler
    {
        type            omegaWallFunction;
        value           $internalField;
    }


    ground
    {
        type            atmOmegaWallFunction;
        value           $internalField;
		z0				uniform 0.017;
		kappa			0.41;
		Cmu				0.09;
    }
	
	
    #include "include/frontBackUpperPatches"
}


// ************************************************************************* //
