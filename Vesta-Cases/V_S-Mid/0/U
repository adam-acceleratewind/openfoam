/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include 	"include/initialConditions"
dimensions      [0 1 -1 0 0 0 0];

internalField   uniform $flowVelocity;

boundaryField
{
    
     #includeEtc "caseDicts/setConstraintTypes"

	inlet
	{
		type  codedFixedValue;
		value $internalField;
		name ablProfile;
		
		code
		#{
		const fvPatch& boundaryPatch = patch();
		const vectorField& Cf = boundaryPatch.Cf();
		vectorField& field = *this;   
		
		scalar Ut = 6.37, hb = 16.3, z0 = 0.017, ht = 17.8; //input values
		
		forAll(Cf, faceI)
		{
			const scalar y = Cf[faceI].y();
			const scalar Ux = (Ut / log( (ht+z0) / z0)) * log( (y+hb+z0) / z0);
			field[faceI] = vector(Ux, 0.0, 0.0);	 
		} 
		#};
			 
		codeOptions
		#{
		-I$(FOAM_SRC)/finiteVolume/lnInclude \
		-I$(FOAM_SRC)/meshTools/lnInclude
		#};
		
		// codeInclude
		// #{
		// #include "fvCFD.H"
		// #include <cmath>
		// #include <iostream>
		// #};
	}


    outlet
    {
    	type		inletOutlet;
   	inletValue 	uniform (0 0 0);
  	value		$internalField; 
    }

    leftSide
    {
        type            slip;
    }
    rightSide
    {
        type            slip;
    }
    top
    {
	type		slip;
    }
    ground
    {
	type		noSlip;
    }
    building
    {
        type            noSlip;
    }
    spoiler
    {
        type            noSlip;
    }
  
}